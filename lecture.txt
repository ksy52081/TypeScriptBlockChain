#1.5 타입스크립트가 존재하는 이유?
왜 JS 에서 TS로 오는가? 
안정성!
특히 타입 안정성 덕분에 타입스크립트의 장점을 이용할 수 있다.

코드의 버그를 혁신적으로 줄여준다.
자바스크립트는 이해해주려고 한다.
에러를 보여주지 않으려고 노력한다.

예시 
[1,2,3,4] + false
=> '1,2,3,4false'
배열이 문자열이 되어버리고
false라는 boolean도 문자열이 되어버린다!

예시 2

function divide(a,b) {
    return a/b
}

divide(2,3)  
같은 상황일 때 나눗셈을 하기를 기대하고 만든다.

하지만
divide("xxxxx") 와 같이 숫자도 아니고, 인자가 하나밖에 없을 때에도
-> NaN
값을 띄울 뿐 코드 실행 자체를 막아주지 않는다.

예시 3 : 런타임 에러 (콘솔 안에서 발생하는 에러 ~ 유저의 컴퓨터에서 코드가 실행될 때에만 일어나는 에러일 수도 있다)

const nico = {name : "nico"}

nico.hello();
-> Uncauhgt TypeError: nico.hello is not a function

하지만~ 이런 에러는 코드를 실행 하기 전에 최소화 할 수 있는 에러 중 하나이다.
nico 안에 hello 라는 함수가 정의되지 않았음을 누가 봐도 알지만
자바스크립트는 에러날 거라는 걸 몰라서 직접 돌리고 나서야
"아, 잘못되었구나"를 안다는 거다.


#2.0 타입스크립트는 그대로 수행되는 것이 아니라
그 코드를 컴파일 하면 일반적인 js 코드가 된다.
하지만, 타입스크립트 코드에 에러가 있으면 그 코드는 JS로 컴파일 되지 않는다.

무사히 컴파일 됬다는 것은 타입스크립트 코드도 제대로 작성된 것이고
데이터 타입에도 문제가 없었다는 뜻이다.

수강생 노트1)
타입스크립트 코드 테스트
https://www.typescriptlang.org/play

타입스크립트 핸드북
https://typescript-kr.github.io/pages/basic-types.html

타입스크립트란?
1.TypeScript는 JavaScript에 추가적인 구문을 추가하여 editor와의 단단한 통합을 지원합니다. editor에서 초기에 오류를 잡을 수 있습니다.

2. TypeScript 코드는 JavaScript가 실행되는 모든 곳(브라우저, Node.js 또는 Deno 및 앱 등)에서 JavaScript로 변환될 수 있습니다.

3. TypeScript는 JavaScript를 이해하고 타입 추론(type inference)을 사용하여 추가 코드 없이도 훌륭한 도구를 제공합니다.


#2.1 

TypeScript는 두가지를 결합했다.

1. 아니면 그냥 js 처럼 변수만 생성하고 넘어가도 된다. ~ 여기서 좋은 점은 tS가 타입을 추론해준다는 것이다.
2. 데이터와 변수의 타입을 명시적으로 정의할 수 있다.

1) js처럼 변수만 생성해도 찰떡같이 TS가 알아먹는 경우
let a = "hello"
a = "bye"
는 문제 없다. (string -> string 이기 때문에)

but,
a = 1
은 에러가 발생한다. (a는 string이라는 걸 알고 있는 상태에서 string -> integer 이기 때문에)

2) 데이터와 변수의 타입을 명시적으로 정의하는 경우
let b : boolean = "x"
let b : boolean = true
type checker가 b 변수의 값이 정의한 대로 boolean인지 확인해준다.

let c = [1,2,3]
let c : number[] = [1,2,3]
과 같다.
이 숫자 list인 c는
c.push("1")은 작동하지 않고 에러를 출력한다
string을 number의 array에 집어넣으려고 하는 것이기 때문,


#2.2 
optional 타입

const player = {
    name : "SY"
}

타입스크립트가 player 안에 있는 name 은 string이라고 추론함

const player : object = {
    name : "SY"
} 

로 시작할 수 있지만, 이 타입은 쓸모가 없다.
만일 object라고 정의해버리마녀, typescript는 player.name이 존재하는지 모른다.

object 타입에는 name 요소가 없다고 에러가 뜬다.

player 안에 있는 요소들의 타입 정의는 아래처럼 작성해 정의내릴 수 있다.
const player : {
    name : string;
    age : number;
} = {
    name : "SY"
}

이렇게만 작성하면
Property 'age' is missing in type '{ name: string; }' but required in type '{ name: string; age: number; }'.
로 age가 빠진 것에 대해 에러를 출력한다.
하지만 

const player : {
    name : string;
    age? : number;
} = {
    name : "SY"
}
처럼 물음표를 붙이게 되면, 요인이 없더라도 오류를 출력하지 않는다.
사실상 
age? : number 는
age : number or undefined 와 같다. (Optional Parameter)

if(player.age < 10){}
을 하면, age가 undefined 일 수 있다고 에러를 출력한다 그러므로

if(player.age && player.age < 10){}
로 존재 여부와 조건을 같이 붙여줘서 더 안정성 있게 코드를작성한다.



여기서
const playerNico : {
    name : string;
    age? : number;
} = {
    name:"nico"
}

const playerSY : {
    name : string;
    age? : number;
} = {
    name:"SY",
    age:13
}
// 같은 것을 반복하는것은 비효율적이다.

이경우에는 alias 타입을 생성할 수 있다.

type Player ={
    name : string;
    age? : number;
}
//Player는 대문자!

const Nico : Player = {
    name:"nico"
}

const SY : Player = {
    name:"SY",
    age:13
} 

형태로 압축이 가능하다.

const let object list 등 변수에 타입을 할당하는 방법을 배웠다.
그러면 함수는?

function playerMaker(name:string){
    return{
        name:name
    }
}

function playerMaker(name:string) : Player{
    return{
        name:name
    }
}
const nico = playerMaker("nico")
nico.age = 12

화살표 함수로는 어떻게 똑같이 쓸 수 있나?
const playerMaker = (name:string) : Player => ({name})


#2.3

Readonly 타입
tuple : array이지만, 최소한의 길이가 있어야 하고, 특정 위치에 특정 타입이 있어야 한다.

const playerTuple : [string, number, boolean] = ["SY", 12, true]
//최소한 3개 이상의 아이템이 들어가야 하고, 처음 세개의 아이템은 각각 string, number, boolean 타입이어야 한다.

const playerTupleReadOnly : readonly [string, number, boolean] = ["SY", 12, true]

let a : undefined = undefined;
let b : null = null;
let c =[];
//let c : any[] = [];

#2.4 
api 등으로 받을 예정인 데이터의 타입을 모를 경우에는 어떻게 해야 할까? => unknown!

let a : unknown;

=> 어떤 작업을 하려면 이 변수의 타입을 먼저 확인해야 하는 방식으로 보호받게 된다.
 
let a : unknown;
let b = a+1 // err: a is unknown

let a : unknown;
if (typeof a === "number"){
    let b = a+1;
}
if (typeof a ===  "string"){
    let b = a.toUpperCase();
}

======================================
void : 아무것도 return 하지 않는 함수를 대상으로 사용함

function hello() {
    console.log("x");
}
//is same
functon hello() : void {
    console.log("x");
}

const a = hello()
a.toUpperCase //error :Property 'toUpperCase' does not exist on type 'void';
//아무것도 출력하지 않는데 toUpperCase를 쓸 수 있을리가 없음.

=======================================
never : 함수가 절대 return 하지 않을때 발생한다.
함수에서 예외가 발생했을 때

function hello(): never {
    return "x"
} // error : Type 'string' is not assignable to type 'never'.ts(2322)
//에러가 발생한다.


function hello(): never {
    throw new Error("XXX") 
}// 정상작동한다. ~ return 하지 않고 오류를 발생시키는 함수


never는 타입이 두가지일수도 있는 상황에 발생할 수 있다.

예시
function sayHello (name:string|number){
    if( typeof name === "string"){
        name // (parameter) name : string
    } else if (typeof name === "number"){
        name // (parameter) name : number
    } else {
        name // (parameter) name : never 
        //이미 변수 name은 string 이나 number 둘 중에 하나라고 정의내려진 시점에서
        //두가지 경우의 수 모두 체크를 했기 때문에
        //여기에 무얼 쓰던지 그 타입은 never 이다.
        // 이 코드는 절대 실행되지 않아야 한다는 뜻이다.
    }
}

#3.0
배울 개념
call signiture
polymorphism
overloading
generics

call signiture : 함수에 입력한 인자의 type과 return하는 값의 type을 보여주는 명세
const add = (a:number, b:number): number => a+b;
// 함수 위에 마우스를 올렸을 때, const add = (a:number, b:number) => number 라고 보여준다.

우리는 우리만의 call signiture 를 선언하고 싶다.

type AddType = (a:number, b:number) => number;
const add : AddType = (a,b) => a+b;
// 이렇게 하면 이미 각 인자의 타입을 정의했으므로 굳이 add 함수를 정의할 때 인자마다 반복적으로 타입을 명시해 줄 필요가 없어지낟.
// 핵심은 함수의 값 정의와 함수의 데이터의 타입 정의를 나누어서 관리할 수 있다는 강점에 있다.

#3.1 overloading
대부분의 상황에서 다른 사람들이 만든 외부 라이브러리를 사용하는 경우가 대부분인데,
이런 패키지나 라이브러리는 오버로딩이 심하다.

오버로딩이란 무엇인가?

type AddType = (a:number, b:number) => number;
// is same
type AddType = {
    (a:number, b:number) : number
}
왜 굳이 {}로 포장하나?
많은 경우 서로 다른 여러개의 call signiture 를 가질 수 있기 때문이다.

type AddType = {
    (a:number, b:number) : number
    (a:number, b:string) : number
}

const add : AddType = (a,b) => {
    if (typeof b === "string"){
        return a
    }
    return a+b //string 이 아닐 때에는 a+b를 출력
}

============================

실제 예시 Next.js (React의 다른 모듈)
Router.push("/home")
Router.push({
    path : "/home",
    state : 1
})

//이렇게 같은 함수에도 불구하고 string 으로 입력하거나 object로 입력할 수 있다. 양 쪽 다 문제 없이 가동한다.

type Config = {
    path : string,
    state: object,

}

type Push = {
    (path:string):void
    (config : Config):void
}

const push:Push (config)=> {
    if (typeof config === "string"){
        console.log(config)
    }else{
        console.log(config.path)
    }
}

=========================================

하나의 argmuent 가 아니라, 여러개의 argmuent로 이루어졌을 때에는 어떨까?
argment의 갯수가 다를때에는?

type AddType2  = {
    (a:number, b:number) : number
    (a:number, b:number, c:number) : number
}

const add : AddType2 = (a,b,c) =>{
    if(c) return a+b+c
    return a+b
} //Error ~ Type '(a: number, b: number, c: number) => number' is not assignable to type 'AddType2'
// call signiture 를 해석하자면 c는 optional 한거다. 즉 있을 수도 있고 없을 수도 있다.
// 아래처럼 변경시키면 해결된다.

const add : AddType2 = (a,b,c?:number) =>{
    if(c) return a+b+c
    return a+b
}// ?를 언급함으로써 c가 명확하게 optional 한 변수임을 정의한다.

수강생 노트 1)
Function(=Method) Overloading은 직접 작성하기보다 외부 라이브러리에 자주 보이는 형태로, 하나의 함수가 복수의 Call Signature를 가질 때 발생한다

type Add = {
(a: number, b: number): number,
(a: number, b: string): number
}

const add: Add = (a, b) => {
if (typeof b === "string") return a;
return a + b;
}

매개변수의 데이터 타입이 다른 경우 예외 처리

type Add2 = {
(a: number, b: number): number,
(a: number, b: number, c: number): number
}

const add2: Add2 = (a, b, c?: number) => {
if (c) return a + b + c;
return a + b;
}

매개변수의 수가 다른 경우 예외 처리

위와 같은 함수는 거의 없지만 외부 라이브러리에서 활용될 수 있다

router.push("/home");

router.push({
path: "/home",
state: 1
});

예를 들어, Next.js의 라우터 push가 대충 두 가지 방법으로 페이지를 이동한다고 할 때,

type Config = {
path: string,
state: number
}

type Push = {
(config: Config): void,
(config: string): void
}

const push: Push = (config) => {
if (typeof config === "string") console.log(config);
else console.log(config.path);
}

패키지나 라이브러리는 위와 같이 두 가지 경우의 Overloading으로 디자인되어 있을 것이다


#3.2 다형성 polymorphism

poly + morphic = multi + structure/form
여러형태, 여러구조, 여러모형

generic이 어떻게 polymorphism에 영향을 주는가?

예시를 만들어보자

1. call signiture를 만들자

type Superprint{
    (arr: number[]) : void
    (arr: boolean[]) : void
    (arr: (number|boolean)[]) : void
}

const superPrint : Superprint = (arr) => {
    arr.forEach(i => console.log(i))
}

SuperPrint([1,2,3,4])
SuperPrint([true,true,false,false])
SuperPrint(["a","b","c","d"]) // 에러 발생!
SuperPrint([1,2,true,"a"]) //에러 발생

// 문제는, number 배열을 받을 수도 있고,boolean , object 등등 뭐든 배열로 받을 수 있다.

엄청나게 다양한 유형의 타입들이 있는데, 그걸 일일이 다 추가해야 할까?

concrete type : number, boolean, string, void, null, 등등

generic type : placeholder같은 것이다. typescript는 그게 무엇인지 추론해서 함수를 사용할 것이다.

call signiture를 작성할 때, 여기 들어올 확실한 고정되어있는 타입을 모를 때 generic을 사용한다.
분명히 concrete type들의 조합임은 분명하나, 그 type이 무엇인지 특정하지 못한다.

어떻게 사용하나?

type Superprint{
    <T>(arr: T[]) : void
}
// 굳이 T, V가 아니어도 된다,
type Superprint{
    <V>(arr: V[]) : void
    <Generic>(arr: Generic[]) : void
    <Potato>(arr: Potato[]) : void
    <GenericType>(arr: GenericType[]) : void
    <Placeholder>(arr: Placeholder[]) : void
    <TypePlaceholder>(arr: TypePlaceholder[]) : void
    :
    :
    :
}
어느것이든 상관 없다.
그때 그때 상황에 맞게 call signiture를 작성해준다.




type Superprint{
    <TypePlaceholder>(arr: TypePlaceholder[]) : TypePlaceholder
}
const superPrint : Superprint = (arr) => arr[0]


※ generic type은 어떻게든 call signiture를 작성해준다.
any type을 쓰지 않는 이유는 이 점에 있다.
any type은 call signiture를 찾아서 작성하는게 아니라 타입을 무시하겠다는 선언이다.

//////////////// 예시 ////////////////////
type Superprint = {
    <T>(arr: T[]) : T
}
const printFirst : Superprint = (arr) => arr[0]
const d = superPrint([1,true,false,"hello"])

d.toUpperCase 가 문제가 있음을 미리 알 수 있지만, 
(generic으로 call signiture가 작성되기 때문에, 현재 타입의 데이터에 toUpperCase()함수가 적합하지 않음을 알 수 있다.)

//////////////// 예시 ////////////////////
type Superprint = {
    (arr: any[]) : any
}
const printFirst : Superprint = (arr) => arr[0]
const d = superPrint([1,true,false,"hello"])

의 경우에는 
d.toUpperCase 가 문제가 있음을 미리 알수 없다.


generic 이 하나가 아니라 복수개를 사용하고 싶을 때에는?
type Superprint = {
    <T, V>(a: T[], b:M) : T
}

수강생 노트1
Generics

제네릭은 C#이나 Java와 같은 언어에서 재사용 가능한 컴포넌트를 만들기 위해 사용하는 기법입니다. 단일 타입이 아닌 다양한 타입에서 작동할 수 있는 컴포넌트를 생성할 수 있습니다.
(구체적인 타입을 지정하지 않고 다양한 인수와 리턴 값에 대한 타입을 처리할 수 있다.)
타입스크립트에서 제네릭을 통해 인터페이스, 함수 등의 재사용성을 높일 수 있습니다.
```
function identity< Type >(arg: Type): Type {
return arg;
}

// 제네릭 화살표 함수 (tsx기준)
const identity=< Type extends {} >(arg: Type):Type => {
return arg;
}

let output = identity< string >("myString"); // 첫 번째 방법
let output = identity("myString"); // 두 번째 방법
// 두 번째 방법은 type argument inference(타입 인수 유추)를 사용합니다. 즉, 컴파일러가 전달하는 인수 유형에 따라 자동으로 Type 값을 설정하기를 원합니다.
```
https://www.typescriptlang.org/docs/handbook/2/generics.html


수강생 노트2
그렇다면 그냥 any를 넣는 것과 Generic의 차이는 무엇일까?

type SuperPrint = {
(arr: any[]): any
}

const superPrint: SuperPrint = (arr) => arr[0]

let a = superPrint([1, "b", true]);
// pass
a.toUpperCase();

any를 사용하면 위와 같은 경우에도 에러가 발생하지 않는다

type SuperPrint = {
(arr: T[]): T
}

const superPrint: SuperPrint = (arr) => arr[0]

let a = superPrint([1, "b", true]);
// error
a.toUpperCase();

Generic의 경우 에러가 발생해 보호받을 수 있다
* Call Signature를 concrete type으로 하나씩 추가하는 형태이기 때문!

type SuperPrint = {
(arr: T[], x: M): T
}

const superPrint: SuperPrint = (arr, x) => arr[0]

let a = superPrint([1, "b", true], "hi");

위와 같이 복수의 Generic을 선언해 사용할 수 있다

#3.4 conclusions

generic을 이용해 call signiture 를 작성하는 경우는 상대적으로 드물 것이다

즉 라이브러리를 만들거나, 다른 개발자가 사용할 기능을 개발하는 경우에는 generic 이 유용할 것이다.

type FirstPrintType = {
<TypePlaceholder>(arr: TypePlaceholder[]) : TypePlaceholder
}
const printFirst : FirstPrintType = (arr) => arr[0]

// 똑같다.

function superPrint<V>(a: V[]){
    return a[0]
}

항상 타입스크립트가 타입을 유추하도록 하는 것이 좋다.



generic 의 다른 사용방법!!!
call signiture 외에 사용하는 방법이 있다.

타입을 생성하기 / 타입을 확장하기


type Player<T> = {
    name : string
    extraInfo : T 
}

const SY : Player<{favFood:string}> ={
    name : "SY Kim",
    extraInfo: {
        favFood:"Chicken"
    }

}


Player<{favFood:string}> 자체는

'''
type SYPlayer = Player<SYExtra>

type SYExtra = {
    favFood : string
}
'''
로 코드를 확장 할 수도 있다.


function printAllNumbers(arr: number[]){}
function printAllNumbers(arr: Array<number>){}



in React.js 에서....
useState<number>()  
를 사용하면, 타입이 number로 한정시킬 수 있다


#4.0 Class 


private Method
public Property
abstract Class
polymorphism
generic


class Player {
    constructor(
        private firstName: string,
        private lastName : string,
        public nickName : string,
    ){}
}

// TypeScript <==> JavaScript

class Player {
    constructor(firstName, lastName)
        this.firstName = firstName;
        this.lastName = lastName;
        this.nickName = nickName;
    ){}
}

javascript로 컴파일 되면서 private가 사라진다.


sy.firstName
// >> Property 'firstName' is private and only accessible within class 'Player'
sy.nickName
// >> pierre


///////////////////////abstract class //////////////////////////////////////

//abstract class는  다른 클래스가 상속 받을 수 있는 클래스를 말한다.
abstract class User {
    constructor(
        private firstName: string,
        private lastName : string,
        public nickName : string,
    ){}
}

class Player extends User {

}


하지만 직접 새로운 인스턴스를 만들수는 없다.
이를 쉽게 말하면
const sy = new Player("Sangyoon", "kim", "pierre"); //는 가능하지만
const sy = new User("Sangyoon", "kim", "pierre"); //는 불가능하다.

////////////////////////////////////////////////////////////////////


///////////////////////abstract Method //////////////////////////////////////

abstract class User {
    constructor(
        private firstName: string,
        public lastName : string,
        protected nickName : string,
    ){}
    //private getFullName(){ //private를 쓰면 외부에서 이 함수를 쓸 수 없다.
    getFullName(){
        return `$(this.firstName) $(this.lastName)` //method의 implementation(구현)
    }
}

const sy = new Player("Sangyoon", "kim", "pierre");
sy.getFullName()


추상 메소드를 만들려면 메소드를 클래스 안에서 구현하지 않으면 안된다.

추상 클래스 안에는 추상 메소드를 만들 수 있다.
하지만, 메소드를 구현해서는 안되고, 대신에, 메소드의 call signiture만 적어둬야 한다!

추상 메소드는 추상클래스를 상속받는 모든것들이 구현해야 하는 메소드를 말한다. 
(니가 걔네들에게 어떻게 구현하는지에 대해서는 알려주고 싶지 않지만)
구현이 어떻게 되어도 상관 없지만, 뭘 어떻게 해서든 구현하기를 원한다
////////////////////////////////////////////


※ 만약 필드가 외부로부터는 보호되지만(클래스 밖에서는 사용할 수 없다.),
다른 자식 클래스에게서 사용되기 바란다면, private을 쓰지마라.
private 대신 protected 를 사용할 것.

예를들어,


abstract class 는 직접적으로 인스턴스를 만들지는 못하지만
(추상 클래스는 어떤 타입의 어떤 변수가 있고, 
어떤 타입의 데이터를 쓰는 함수가 있는지 정의할 뿐
변수의 값이 무엇인지, 함수의 기능이 무엇인지 정의하지 않는다.
~ 물론 abstract 클래스 안에 함수를 만들 수 있지만
abstract method를 쓰는 것을 권장한다.)

대신 그 클래스를 상속할 수 있다,
추상 method는 구현되어 있지 않은(코드가 없는) method이다.

기본적으로 모든 변수와 함수의 default는 public이다.


//예시 ~ 해시맵(사전 같은 것) 만들기!
해싱 알고리즘을 쓰는 완벽한 해시맵!



type Words = {
  [key:string]:string // Words타입이 string만을 property로 가지는 오브젝트다!
}

[x:number]
제한된 양의 property 혹은 key를 가지는 타입을 정의해 주는 방법!
object의 type을 선언해야 할 때 쓸 수 있다!

//constructor에서 직접 초기화 되지 않는 property를 정의하고 싶다면,

class Dict {
  private words : Words
  constructor(){
      this.words= {}
  }
}
처럼 constructor 에 넣지 않아도 된다. initializer 없이 선언해주고,
대신 따로 constructor에 수동으로 초기화 시켜줘야 한다.


 - 클래스를 타입처럼 쓸 수 있다. (concrete나 generic이 아님)
 - 반드시 constructor 안에서 정의해서 initializer를 자동으로 거치게 할 필요는 없다.
 - [x:number] 같은 방식의 타입 정의 ~ 아무 이름을 가진 key값은 number의 타입을 가진다.


 # 4.2 

 값이 외부에 노출되길 바라지만, 수정하진 않았으면 좋겠다.
 readonly 를 붙여서 방지하지만

 데이터의 인가는 그대로 public으로 유지하면서 
 typescript의 힘을 빌려 readonly 스럽게 읽기 전용으로 만들어보자.

 인터페이스는 타입과 유사하지만 두가지에서 차이점을 보인다.

type Nickname = string;

 type Player = {
     nickname : Nickname,
    healthbar : number
 } 

type Friends = Array<string>

 const sy : Player = {
     nickname : "pierre",
     healthbar:10
 }

 type Food = string;
 const peanut : Food = "delicious"

// type을 정의할 때, 특정한 값으로 한정시킬 수 있다.
type Team = "red" | "blue" | "green" ; 
type teamPlayer = {
    nickname : string,
    team : Team
}

const js = teamPlayer = {
    nickname : "jy",
    team : "pink" //type pink is not assignable to type team
}

오브젝트의 모양을  설명하는 다른 방법인 interface  (객체지향 프로그래밍의 개념을 활용해 만들어짐,)

interface Player {
    nickname : string,
    team : Team    
}
====
type teamPlayer = {
    nickname : string,
    team : Team
}


type은 concrete type으로, 특정한 값("red", "yellow")으로도, object의 모양을 특정할 수도 있다.
interface는 typescript에게 object의 모양을 특정하는 데에만 사용할 수 있다. 

type 키워드는 interface보다 활용도가 높다.


interface는 extends를 통해 타입의 상속이 용이하다.
같은 이름의 interface를 여러차례 정의해주면,
타입스크립트가 자동으로 정의해준 모든 정보를 합쳐서 하나로 취급해준다. 

~ 인터페이스는 조금 더 나은 합체능력을 가진다.
같은 인터페이스에 다른 이름을 가진 property를 쌓을 수 있다.


#4.3 Interface part 2

type & inferface는 모두 타입스크립트에게 오브젝트의 모양을 알려줄 수 있다.

차이점 ~ 인터페이스와 타입은 상속법이 다르다.

만일 같은 인터페이스에 있는 다른 property들을 합치고 싶으면
interface XXX 를 난잡하게 반복 사용해도 타입스크립트가 알아서 합쳐서 하나로 만들어 줄거다.

but type 을 사용한다면 할 수 없다.


abstract class User_A {
    constructor(
        protected firstName:string,
        protected lastName : string,
    ) {}
    abstract sayHi(name:string): string
    abstract fullName():string
}

class Player_A extends User_A {
    fullName(){
        return `${this.firstName} ${this.lastName}`
    }
    sayHi(name:string){
        return `hello ${name}. My name is ${this.fullName()}`
    }
}

//추상 클래스는 인스턴스를 만드는걸 허용하지 않는다.
// 즉, new User() 가 불가능하다는 뜻,
// 만들고 싶다면, 추상 클래스를 상속하는 새로운 클래스를 만들어야 한다.

추상 클래스의 문제점은 보다시피 JavaScript에서는 abstract의 개념이 없다는 점이다.
그래서 typescript에서 백날 열심히 abstract class를 만들어도
js 로 빌드하고 나면 그냥 클래스가 되어버리는 것이다 
쓰이지도 않을(추상 클래스는 인스턴스를 못만드니까.) js 코드가 생기는 것이다.


이런 부분에서 인터페이스가 강점을 가진다.
인터페이스를 쓰면 js 단계에서 아예 사라진다!! 
(즉 JS로 변형될 때 코드로 남지 않아. 코드 다이어트가 된다,)

또 다른 질문은 ~ 인터페이스를 쓸 때 클래스가 특정 형태를 따르도록 어떻게 강요할 수 있을까?


interface User_I {
    firstName : string,
    lastName : string,
    sayHi(name:string) : string
    fullName():string
}

class Player_I implements User_I {
      constructor(
      protected firstName:string,
      protected lastName : string,
  ) {}
  fullName(){
      return `${this.firstName} ${this.lastName}`
  }
  sayHi(name:string){
      return `hello ${name}. My name is ${this.fullName()}`
  }
}
// inplements는 js에 존재하지 않는 키워드이다. (TS에만 있고 JS에는 없다.)

// 인터페이스 자체를 타입으로 쓸 수도 있다.


function makeUser(user:User_I){
  return "hi"
}


makeUser({
  firstName:"sy",
  lastName:"kim",
  fullName: () => "xx",
  sayHi: (name) => "string"
})

함수에서 인터페이스를 반환한다면, 타입을 리턴하는 것처럼
new 다음에 클래스를 넣어줘야 하는 class 리턴과는 다르다.
인터페이스를 리턴한다면 new User 처럼 새로운 것을 소환할 필요가 없다.
타입에 불과하므로, 리턴할 대상을 오브젝트에다 빠짐없이 넣어주기만 하면 인터페이스 조건을 만족시킨다,.



//헷갈리지 말자, 인터페이스 vs 타입, 인터페이스 vs class 


#4.4 Recap

클래스에 특정 메소드나 property를 상속하도록 강제하는 방법

인터페이스는 원하는 메소드는 property를 클래스가 가지도록 강제할 수 있게 해준다.

인터페이스는 JS 로 컴파일 되지 않는다.
그 말은, 추상 클래스와 비슷한 보호를 제공하지만, JS로 변환할 때는 사라지므로 가볍다.
추상 클래스를 쓰면 자바스크립트에서는 일반 클래스로 바뀌지만,

만일 추상 클래스를 다른 클래스들이 특정 모양을 따르도록 하기 위한 용도로 쓰인다면.
같은 역할을 하는 인터페이스를 쓰는게 더 좋다.

class Player extends User 처럼 쓰는 것 대신에
class Player implements User 를 쓰자.

첫번째. 타입을 쓰고 싶다면, type 키워드를 쓰자.
오브젝트의 모양을 설명하기 / 타입 alias를 만들기 / 타입을 특정된 값으로 만들기.
number / /  "1"|"2"

타입스크립트에게 오브젝트의 모양을 알려주기 위해서는 인터페이스를 사용하고
나머지 상황에서는 Type을 쓴다.


인터페이스와 Type 의 차이점
참조 : https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces


수강생 노트 1
Type Aliases과 Interfaces의 차이점
Type Aliases과 인터페이스는 매우 유사하며 많은 경우 자유롭게 선택할 수 있습니다. 인터페이스의 거의 모든 기능은 type에서 사용할 수 있으며, 주요 차이점은 type을 다시 열어 새 속성을 추가할 수 없는 것입니다. 반면 인터페이스는 항상 확장 가능합니다.
결론: 대부분의 경우 개인 취향에 따라 선택 가능
(인터페이스 사용을 조금 더 추천)

